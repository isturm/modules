/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.Producer;
import de.uhh.l2g.plugins.model.ProducerModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Producer service. Represents a row in the &quot;LG_Producer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ProducerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProducerImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see ProducerImpl
 * @generated
 */
@ProviderType
public class ProducerModelImpl
	extends BaseModelImpl<Producer> implements ProducerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a producer model instance should use the <code>Producer</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Producer";

	public static final Object[][] TABLE_COLUMNS = {
		{"producerId", Types.BIGINT}, {"idNum", Types.VARCHAR},
		{"homeDir", Types.VARCHAR}, {"hostId", Types.BIGINT},
		{"institutionId", Types.BIGINT}, {"numberOfProductions", Types.BIGINT},
		{"approved", Types.INTEGER}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("producerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeDir", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("institutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("numberOfProductions", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approved", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Producer (producerId LONG not null primary key,idNum VARCHAR(75) null,homeDir VARCHAR(75) null,hostId LONG,institutionId LONG,numberOfProductions LONG,approved INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LG_Producer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY producer.producerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Producer.producerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Producer"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Producer"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Producer"),
		true);

	public static final long APPROVED_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long HOMEDIR_COLUMN_BITMASK = 8L;

	public static final long HOSTID_COLUMN_BITMASK = 16L;

	public static final long IDNUM_COLUMN_BITMASK = 32L;

	public static final long INSTITUTIONID_COLUMN_BITMASK = 64L;

	public static final long PRODUCERID_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Producer"));

	public ProducerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _producerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProducerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _producerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Producer.class;
	}

	@Override
	public String getModelClassName() {
		return Producer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Producer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Producer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Producer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Producer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Producer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Producer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Producer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Producer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Producer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Producer.class.getClassLoader(), Producer.class,
			ModelWrapper.class);

		try {
			Constructor<Producer> constructor =
				(Constructor<Producer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Producer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Producer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Producer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Producer, Object>>();
		Map<String, BiConsumer<Producer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Producer, ?>>();

		attributeGetterFunctions.put("producerId", Producer::getProducerId);
		attributeSetterBiConsumers.put(
			"producerId", (BiConsumer<Producer, Long>)Producer::setProducerId);
		attributeGetterFunctions.put("idNum", Producer::getIdNum);
		attributeSetterBiConsumers.put(
			"idNum", (BiConsumer<Producer, String>)Producer::setIdNum);
		attributeGetterFunctions.put("homeDir", Producer::getHomeDir);
		attributeSetterBiConsumers.put(
			"homeDir", (BiConsumer<Producer, String>)Producer::setHomeDir);
		attributeGetterFunctions.put("hostId", Producer::getHostId);
		attributeSetterBiConsumers.put(
			"hostId", (BiConsumer<Producer, Long>)Producer::setHostId);
		attributeGetterFunctions.put(
			"institutionId", Producer::getInstitutionId);
		attributeSetterBiConsumers.put(
			"institutionId",
			(BiConsumer<Producer, Long>)Producer::setInstitutionId);
		attributeGetterFunctions.put(
			"numberOfProductions", Producer::getNumberOfProductions);
		attributeSetterBiConsumers.put(
			"numberOfProductions",
			(BiConsumer<Producer, Long>)Producer::setNumberOfProductions);
		attributeGetterFunctions.put("approved", Producer::getApproved);
		attributeSetterBiConsumers.put(
			"approved", (BiConsumer<Producer, Integer>)Producer::setApproved);
		attributeGetterFunctions.put("groupId", Producer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Producer, Long>)Producer::setGroupId);
		attributeGetterFunctions.put("companyId", Producer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Producer, Long>)Producer::setCompanyId);
		attributeGetterFunctions.put("userId", Producer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Producer, Long>)Producer::setUserId);
		attributeGetterFunctions.put("userName", Producer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Producer, String>)Producer::setUserName);
		attributeGetterFunctions.put("createDate", Producer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Producer, Date>)Producer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Producer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Producer, Date>)Producer::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getProducerId() {
		return _producerId;
	}

	@Override
	public void setProducerId(long producerId) {
		_producerId = producerId;
	}

	@Override
	public String getIdNum() {
		if (_idNum == null) {
			return "";
		}
		else {
			return _idNum;
		}
	}

	@Override
	public void setIdNum(String idNum) {
		_columnBitmask |= IDNUM_COLUMN_BITMASK;

		if (_originalIdNum == null) {
			_originalIdNum = _idNum;
		}

		_idNum = idNum;
	}

	public String getOriginalIdNum() {
		return GetterUtil.getString(_originalIdNum);
	}

	@Override
	public String getHomeDir() {
		if (_homeDir == null) {
			return "";
		}
		else {
			return _homeDir;
		}
	}

	@Override
	public void setHomeDir(String homeDir) {
		_columnBitmask |= HOMEDIR_COLUMN_BITMASK;

		if (_originalHomeDir == null) {
			_originalHomeDir = _homeDir;
		}

		_homeDir = homeDir;
	}

	public String getOriginalHomeDir() {
		return GetterUtil.getString(_originalHomeDir);
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_columnBitmask |= HOSTID_COLUMN_BITMASK;

		if (!_setOriginalHostId) {
			_setOriginalHostId = true;

			_originalHostId = _hostId;
		}

		_hostId = hostId;
	}

	public long getOriginalHostId() {
		return _originalHostId;
	}

	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@Override
	public long getNumberOfProductions() {
		return _numberOfProductions;
	}

	@Override
	public void setNumberOfProductions(long numberOfProductions) {
		_numberOfProductions = numberOfProductions;
	}

	@Override
	public int getApproved() {
		return _approved;
	}

	@Override
	public void setApproved(int approved) {
		_columnBitmask |= APPROVED_COLUMN_BITMASK;

		if (!_setOriginalApproved) {
			_setOriginalApproved = true;

			_originalApproved = _approved;
		}

		_approved = approved;
	}

	public int getOriginalApproved() {
		return _originalApproved;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Producer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Producer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProducerImpl producerImpl = new ProducerImpl();

		producerImpl.setProducerId(getProducerId());
		producerImpl.setIdNum(getIdNum());
		producerImpl.setHomeDir(getHomeDir());
		producerImpl.setHostId(getHostId());
		producerImpl.setInstitutionId(getInstitutionId());
		producerImpl.setNumberOfProductions(getNumberOfProductions());
		producerImpl.setApproved(getApproved());
		producerImpl.setGroupId(getGroupId());
		producerImpl.setCompanyId(getCompanyId());
		producerImpl.setUserId(getUserId());
		producerImpl.setUserName(getUserName());
		producerImpl.setCreateDate(getCreateDate());
		producerImpl.setModifiedDate(getModifiedDate());

		producerImpl.resetOriginalValues();

		return producerImpl;
	}

	@Override
	public int compareTo(Producer producer) {
		long primaryKey = producer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Producer)) {
			return false;
		}

		Producer producer = (Producer)obj;

		long primaryKey = producer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProducerModelImpl producerModelImpl = this;

		producerModelImpl._originalIdNum = producerModelImpl._idNum;

		producerModelImpl._originalHomeDir = producerModelImpl._homeDir;

		producerModelImpl._originalHostId = producerModelImpl._hostId;

		producerModelImpl._setOriginalHostId = false;

		producerModelImpl._originalInstitutionId =
			producerModelImpl._institutionId;

		producerModelImpl._setOriginalInstitutionId = false;

		producerModelImpl._originalApproved = producerModelImpl._approved;

		producerModelImpl._setOriginalApproved = false;

		producerModelImpl._originalGroupId = producerModelImpl._groupId;

		producerModelImpl._setOriginalGroupId = false;

		producerModelImpl._originalCompanyId = producerModelImpl._companyId;

		producerModelImpl._setOriginalCompanyId = false;

		producerModelImpl._setModifiedDate = false;

		producerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Producer> toCacheModel() {
		ProducerCacheModel producerCacheModel = new ProducerCacheModel();

		producerCacheModel.producerId = getProducerId();

		producerCacheModel.idNum = getIdNum();

		String idNum = producerCacheModel.idNum;

		if ((idNum != null) && (idNum.length() == 0)) {
			producerCacheModel.idNum = null;
		}

		producerCacheModel.homeDir = getHomeDir();

		String homeDir = producerCacheModel.homeDir;

		if ((homeDir != null) && (homeDir.length() == 0)) {
			producerCacheModel.homeDir = null;
		}

		producerCacheModel.hostId = getHostId();

		producerCacheModel.institutionId = getInstitutionId();

		producerCacheModel.numberOfProductions = getNumberOfProductions();

		producerCacheModel.approved = getApproved();

		producerCacheModel.groupId = getGroupId();

		producerCacheModel.companyId = getCompanyId();

		producerCacheModel.userId = getUserId();

		producerCacheModel.userName = getUserName();

		String userName = producerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			producerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			producerCacheModel.createDate = createDate.getTime();
		}
		else {
			producerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			producerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			producerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return producerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Producer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Producer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Producer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Producer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Producer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Producer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Producer>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _producerId;
	private String _idNum;
	private String _originalIdNum;
	private String _homeDir;
	private String _originalHomeDir;
	private long _hostId;
	private long _originalHostId;
	private boolean _setOriginalHostId;
	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private long _numberOfProductions;
	private int _approved;
	private int _originalApproved;
	private boolean _setOriginalApproved;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Producer _escapedModel;

}