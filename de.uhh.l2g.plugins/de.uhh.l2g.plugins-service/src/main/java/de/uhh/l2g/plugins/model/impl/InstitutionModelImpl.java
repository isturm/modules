/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.Institution;
import de.uhh.l2g.plugins.model.InstitutionModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Institution service. Represents a row in the &quot;LG_Institution&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>InstitutionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InstitutionImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see InstitutionImpl
 * @generated
 */
@ProviderType
public class InstitutionModelImpl
	extends BaseModelImpl<Institution> implements InstitutionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a institution model instance should use the <code>Institution</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Institution";

	public static final Object[][] TABLE_COLUMNS = {
		{"institutionId", Types.BIGINT}, {"parentId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"typ", Types.VARCHAR}, {"www", Types.VARCHAR},
		{"level", Types.INTEGER}, {"sort", Types.INTEGER},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("institutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("www", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sort", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Institution (institutionId LONG not null primary key,parentId LONG,name VARCHAR(75) null,typ VARCHAR(75) null,www VARCHAR(75) null,level INTEGER,sort INTEGER,groupId LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP = "drop table LG_Institution";

	public static final String ORDER_BY_JPQL = " ORDER BY institution.sort ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Institution.sort ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Institution"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Institution"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Institution"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long INSTITUTIONID_COLUMN_BITMASK = 4L;

	public static final long LEVEL_COLUMN_BITMASK = 8L;

	public static final long NAME_COLUMN_BITMASK = 16L;

	public static final long PARENTID_COLUMN_BITMASK = 32L;

	public static final long SORT_COLUMN_BITMASK = 64L;

	public static final long TYP_COLUMN_BITMASK = 128L;

	public static final long WWW_COLUMN_BITMASK = 256L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Institution"));

	public InstitutionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _institutionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInstitutionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _institutionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Institution.class;
	}

	@Override
	public String getModelClassName() {
		return Institution.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Institution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Institution)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Institution, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Institution, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Institution)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Institution, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Institution, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Institution>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Institution.class.getClassLoader(), Institution.class,
			ModelWrapper.class);

		try {
			Constructor<Institution> constructor =
				(Constructor<Institution>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Institution, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Institution, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Institution, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Institution, Object>>();
		Map<String, BiConsumer<Institution, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Institution, ?>>();

		attributeGetterFunctions.put(
			"institutionId", Institution::getInstitutionId);
		attributeSetterBiConsumers.put(
			"institutionId",
			(BiConsumer<Institution, Long>)Institution::setInstitutionId);
		attributeGetterFunctions.put("parentId", Institution::getParentId);
		attributeSetterBiConsumers.put(
			"parentId",
			(BiConsumer<Institution, Long>)Institution::setParentId);
		attributeGetterFunctions.put("name", Institution::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Institution, String>)Institution::setName);
		attributeGetterFunctions.put("typ", Institution::getTyp);
		attributeSetterBiConsumers.put(
			"typ", (BiConsumer<Institution, String>)Institution::setTyp);
		attributeGetterFunctions.put("www", Institution::getWww);
		attributeSetterBiConsumers.put(
			"www", (BiConsumer<Institution, String>)Institution::setWww);
		attributeGetterFunctions.put("level", Institution::getLevel);
		attributeSetterBiConsumers.put(
			"level", (BiConsumer<Institution, Integer>)Institution::setLevel);
		attributeGetterFunctions.put("sort", Institution::getSort);
		attributeSetterBiConsumers.put(
			"sort", (BiConsumer<Institution, Integer>)Institution::setSort);
		attributeGetterFunctions.put("groupId", Institution::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Institution, Long>)Institution::setGroupId);
		attributeGetterFunctions.put("companyId", Institution::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Institution, Long>)Institution::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getTyp() {
		if (_typ == null) {
			return "";
		}
		else {
			return _typ;
		}
	}

	@Override
	public void setTyp(String typ) {
		_columnBitmask |= TYP_COLUMN_BITMASK;

		if (_originalTyp == null) {
			_originalTyp = _typ;
		}

		_typ = typ;
	}

	public String getOriginalTyp() {
		return GetterUtil.getString(_originalTyp);
	}

	@Override
	public String getWww() {
		if (_www == null) {
			return "";
		}
		else {
			return _www;
		}
	}

	@Override
	public void setWww(String www) {
		_columnBitmask |= WWW_COLUMN_BITMASK;

		if (_originalWww == null) {
			_originalWww = _www;
		}

		_www = www;
	}

	public String getOriginalWww() {
		return GetterUtil.getString(_originalWww);
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_columnBitmask |= LEVEL_COLUMN_BITMASK;

		if (!_setOriginalLevel) {
			_setOriginalLevel = true;

			_originalLevel = _level;
		}

		_level = level;
	}

	public int getOriginalLevel() {
		return _originalLevel;
	}

	@Override
	public int getSort() {
		return _sort;
	}

	@Override
	public void setSort(int sort) {
		_columnBitmask = -1L;

		if (!_setOriginalSort) {
			_setOriginalSort = true;

			_originalSort = _sort;
		}

		_sort = sort;
	}

	public int getOriginalSort() {
		return _originalSort;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Institution.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Institution toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InstitutionImpl institutionImpl = new InstitutionImpl();

		institutionImpl.setInstitutionId(getInstitutionId());
		institutionImpl.setParentId(getParentId());
		institutionImpl.setName(getName());
		institutionImpl.setTyp(getTyp());
		institutionImpl.setWww(getWww());
		institutionImpl.setLevel(getLevel());
		institutionImpl.setSort(getSort());
		institutionImpl.setGroupId(getGroupId());
		institutionImpl.setCompanyId(getCompanyId());

		institutionImpl.resetOriginalValues();

		return institutionImpl;
	}

	@Override
	public int compareTo(Institution institution) {
		int value = 0;

		if (getSort() < institution.getSort()) {
			value = -1;
		}
		else if (getSort() > institution.getSort()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Institution)) {
			return false;
		}

		Institution institution = (Institution)obj;

		long primaryKey = institution.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		InstitutionModelImpl institutionModelImpl = this;

		institutionModelImpl._originalInstitutionId =
			institutionModelImpl._institutionId;

		institutionModelImpl._setOriginalInstitutionId = false;

		institutionModelImpl._originalParentId = institutionModelImpl._parentId;

		institutionModelImpl._setOriginalParentId = false;

		institutionModelImpl._originalName = institutionModelImpl._name;

		institutionModelImpl._originalTyp = institutionModelImpl._typ;

		institutionModelImpl._originalWww = institutionModelImpl._www;

		institutionModelImpl._originalLevel = institutionModelImpl._level;

		institutionModelImpl._setOriginalLevel = false;

		institutionModelImpl._originalSort = institutionModelImpl._sort;

		institutionModelImpl._setOriginalSort = false;

		institutionModelImpl._originalGroupId = institutionModelImpl._groupId;

		institutionModelImpl._setOriginalGroupId = false;

		institutionModelImpl._originalCompanyId =
			institutionModelImpl._companyId;

		institutionModelImpl._setOriginalCompanyId = false;

		institutionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Institution> toCacheModel() {
		InstitutionCacheModel institutionCacheModel =
			new InstitutionCacheModel();

		institutionCacheModel.institutionId = getInstitutionId();

		institutionCacheModel.parentId = getParentId();

		institutionCacheModel.name = getName();

		String name = institutionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			institutionCacheModel.name = null;
		}

		institutionCacheModel.typ = getTyp();

		String typ = institutionCacheModel.typ;

		if ((typ != null) && (typ.length() == 0)) {
			institutionCacheModel.typ = null;
		}

		institutionCacheModel.www = getWww();

		String www = institutionCacheModel.www;

		if ((www != null) && (www.length() == 0)) {
			institutionCacheModel.www = null;
		}

		institutionCacheModel.level = getLevel();

		institutionCacheModel.sort = getSort();

		institutionCacheModel.groupId = getGroupId();

		institutionCacheModel.companyId = getCompanyId();

		return institutionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Institution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Institution)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Institution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Institution)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Institution>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private String _name;
	private String _originalName;
	private String _typ;
	private String _originalTyp;
	private String _www;
	private String _originalWww;
	private int _level;
	private int _originalLevel;
	private boolean _setOriginalLevel;
	private int _sort;
	private int _originalSort;
	private boolean _setOriginalSort;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private Institution _escapedModel;

}