/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.Institution_Host;
import de.uhh.l2g.plugins.model.Institution_HostModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Institution_Host service. Represents a row in the &quot;LG_Institution_Host&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>Institution_HostModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Institution_HostImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see Institution_HostImpl
 * @generated
 */
@ProviderType
public class Institution_HostModelImpl
	extends BaseModelImpl<Institution_Host> implements Institution_HostModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a institution_ host model instance should use the <code>Institution_Host</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Institution_Host";

	public static final Object[][] TABLE_COLUMNS = {
		{"institutionHostId", Types.BIGINT}, {"institutionId", Types.BIGINT},
		{"hostId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("institutionHostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("institutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Institution_Host (institutionHostId LONG not null primary key,institutionId LONG,hostId LONG,groupId LONG,companyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table LG_Institution_Host";

	public static final String ORDER_BY_JPQL =
		" ORDER BY institution_Host.institutionHostId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Institution_Host.institutionHostId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Institution_Host"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Institution_Host"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Institution_Host"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long HOSTID_COLUMN_BITMASK = 4L;

	public static final long INSTITUTIONID_COLUMN_BITMASK = 8L;

	public static final long INSTITUTIONHOSTID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Institution_Host"));

	public Institution_HostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _institutionHostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInstitutionHostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _institutionHostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Institution_Host.class;
	}

	@Override
	public String getModelClassName() {
		return Institution_Host.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Institution_Host, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Institution_Host, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution_Host, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Institution_Host)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Institution_Host, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Institution_Host, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Institution_Host)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Institution_Host, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Institution_Host, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Institution_Host>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Institution_Host.class.getClassLoader(), Institution_Host.class,
			ModelWrapper.class);

		try {
			Constructor<Institution_Host> constructor =
				(Constructor<Institution_Host>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Institution_Host, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Institution_Host, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Institution_Host, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<Institution_Host, Object>>();
		Map<String, BiConsumer<Institution_Host, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Institution_Host, ?>>();

		attributeGetterFunctions.put(
			"institutionHostId", Institution_Host::getInstitutionHostId);
		attributeSetterBiConsumers.put(
			"institutionHostId",
			(BiConsumer<Institution_Host, Long>)
				Institution_Host::setInstitutionHostId);
		attributeGetterFunctions.put(
			"institutionId", Institution_Host::getInstitutionId);
		attributeSetterBiConsumers.put(
			"institutionId",
			(BiConsumer<Institution_Host, Long>)
				Institution_Host::setInstitutionId);
		attributeGetterFunctions.put("hostId", Institution_Host::getHostId);
		attributeSetterBiConsumers.put(
			"hostId",
			(BiConsumer<Institution_Host, Long>)Institution_Host::setHostId);
		attributeGetterFunctions.put("groupId", Institution_Host::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Institution_Host, Long>)Institution_Host::setGroupId);
		attributeGetterFunctions.put(
			"companyId", Institution_Host::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Institution_Host, Long>)Institution_Host::setCompanyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getInstitutionHostId() {
		return _institutionHostId;
	}

	@Override
	public void setInstitutionHostId(long institutionHostId) {
		_institutionHostId = institutionHostId;
	}

	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_columnBitmask |= HOSTID_COLUMN_BITMASK;

		if (!_setOriginalHostId) {
			_setOriginalHostId = true;

			_originalHostId = _hostId;
		}

		_hostId = hostId;
	}

	public long getOriginalHostId() {
		return _originalHostId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Institution_Host.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Institution_Host toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Institution_HostImpl institution_HostImpl = new Institution_HostImpl();

		institution_HostImpl.setInstitutionHostId(getInstitutionHostId());
		institution_HostImpl.setInstitutionId(getInstitutionId());
		institution_HostImpl.setHostId(getHostId());
		institution_HostImpl.setGroupId(getGroupId());
		institution_HostImpl.setCompanyId(getCompanyId());

		institution_HostImpl.resetOriginalValues();

		return institution_HostImpl;
	}

	@Override
	public int compareTo(Institution_Host institution_Host) {
		long primaryKey = institution_Host.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Institution_Host)) {
			return false;
		}

		Institution_Host institution_Host = (Institution_Host)obj;

		long primaryKey = institution_Host.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Institution_HostModelImpl institution_HostModelImpl = this;

		institution_HostModelImpl._originalInstitutionId =
			institution_HostModelImpl._institutionId;

		institution_HostModelImpl._setOriginalInstitutionId = false;

		institution_HostModelImpl._originalHostId =
			institution_HostModelImpl._hostId;

		institution_HostModelImpl._setOriginalHostId = false;

		institution_HostModelImpl._originalGroupId =
			institution_HostModelImpl._groupId;

		institution_HostModelImpl._setOriginalGroupId = false;

		institution_HostModelImpl._originalCompanyId =
			institution_HostModelImpl._companyId;

		institution_HostModelImpl._setOriginalCompanyId = false;

		institution_HostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Institution_Host> toCacheModel() {
		Institution_HostCacheModel institution_HostCacheModel =
			new Institution_HostCacheModel();

		institution_HostCacheModel.institutionHostId = getInstitutionHostId();

		institution_HostCacheModel.institutionId = getInstitutionId();

		institution_HostCacheModel.hostId = getHostId();

		institution_HostCacheModel.groupId = getGroupId();

		institution_HostCacheModel.companyId = getCompanyId();

		return institution_HostCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Institution_Host, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Institution_Host, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution_Host, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Institution_Host)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Institution_Host, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Institution_Host, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Institution_Host, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Institution_Host)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Institution_Host>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _institutionHostId;
	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private long _hostId;
	private long _originalHostId;
	private boolean _setOriginalHostId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _columnBitmask;
	private Institution_Host _escapedModel;

}