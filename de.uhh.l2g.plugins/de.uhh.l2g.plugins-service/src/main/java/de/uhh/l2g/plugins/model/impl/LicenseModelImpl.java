/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.License;
import de.uhh.l2g.plugins.model.LicenseModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the License service. Represents a row in the &quot;LG_License&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenseImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see LicenseImpl
 * @generated
 */
@ProviderType
public class LicenseModelImpl
	extends BaseModelImpl<License> implements LicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a license model instance should use the <code>License</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_License";

	public static final Object[][] TABLE_COLUMNS = {
		{"licenseId", Types.BIGINT}, {"fullName", Types.VARCHAR},
		{"shortIdentifier", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"schemeName", Types.VARCHAR}, {"schemeUrl", Types.VARCHAR},
		{"selectable", Types.BOOLEAN}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("licenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortIdentifier", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schemeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schemeUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selectable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_License (licenseId LONG not null primary key,fullName VARCHAR(75) null,shortIdentifier VARCHAR(75) null,url VARCHAR(75) null,schemeName VARCHAR(75) null,schemeUrl VARCHAR(75) null,selectable BOOLEAN,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table LG_License";

	public static final String ORDER_BY_JPQL =
		" ORDER BY license.licenseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_License.licenseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final long SELECTABLE_COLUMN_BITMASK = 1L;

	public static final long LICENSEID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.License"));

	public LicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return License.class;
	}

	@Override
	public String getModelClassName() {
		return License.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((License)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<License, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<License, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(License)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<License, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<License, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, License>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			License.class.getClassLoader(), License.class, ModelWrapper.class);

		try {
			Constructor<License> constructor =
				(Constructor<License>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<License, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<License, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<License, Object>>();
		Map<String, BiConsumer<License, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<License, ?>>();

		attributeGetterFunctions.put("licenseId", License::getLicenseId);
		attributeSetterBiConsumers.put(
			"licenseId", (BiConsumer<License, Long>)License::setLicenseId);
		attributeGetterFunctions.put("fullName", License::getFullName);
		attributeSetterBiConsumers.put(
			"fullName", (BiConsumer<License, String>)License::setFullName);
		attributeGetterFunctions.put(
			"shortIdentifier", License::getShortIdentifier);
		attributeSetterBiConsumers.put(
			"shortIdentifier",
			(BiConsumer<License, String>)License::setShortIdentifier);
		attributeGetterFunctions.put("url", License::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<License, String>)License::setUrl);
		attributeGetterFunctions.put("schemeName", License::getSchemeName);
		attributeSetterBiConsumers.put(
			"schemeName", (BiConsumer<License, String>)License::setSchemeName);
		attributeGetterFunctions.put("schemeUrl", License::getSchemeUrl);
		attributeSetterBiConsumers.put(
			"schemeUrl", (BiConsumer<License, String>)License::setSchemeUrl);
		attributeGetterFunctions.put("selectable", License::getSelectable);
		attributeSetterBiConsumers.put(
			"selectable", (BiConsumer<License, Boolean>)License::setSelectable);
		attributeGetterFunctions.put("description", License::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<License, String>)License::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLicenseId() {
		return _licenseId;
	}

	@Override
	public void setLicenseId(long licenseId) {
		_licenseId = licenseId;
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@Override
	public String getShortIdentifier() {
		if (_shortIdentifier == null) {
			return "";
		}
		else {
			return _shortIdentifier;
		}
	}

	@Override
	public void setShortIdentifier(String shortIdentifier) {
		_shortIdentifier = shortIdentifier;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public String getSchemeName() {
		if (_schemeName == null) {
			return "";
		}
		else {
			return _schemeName;
		}
	}

	@Override
	public void setSchemeName(String schemeName) {
		_schemeName = schemeName;
	}

	@Override
	public String getSchemeUrl() {
		if (_schemeUrl == null) {
			return "";
		}
		else {
			return _schemeUrl;
		}
	}

	@Override
	public void setSchemeUrl(String schemeUrl) {
		_schemeUrl = schemeUrl;
	}

	@Override
	public boolean getSelectable() {
		return _selectable;
	}

	@Override
	public boolean isSelectable() {
		return _selectable;
	}

	@Override
	public void setSelectable(boolean selectable) {
		_columnBitmask |= SELECTABLE_COLUMN_BITMASK;

		if (!_setOriginalSelectable) {
			_setOriginalSelectable = true;

			_originalSelectable = _selectable;
		}

		_selectable = selectable;
	}

	public boolean getOriginalSelectable() {
		return _originalSelectable;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, License.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public License toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenseImpl licenseImpl = new LicenseImpl();

		licenseImpl.setLicenseId(getLicenseId());
		licenseImpl.setFullName(getFullName());
		licenseImpl.setShortIdentifier(getShortIdentifier());
		licenseImpl.setUrl(getUrl());
		licenseImpl.setSchemeName(getSchemeName());
		licenseImpl.setSchemeUrl(getSchemeUrl());
		licenseImpl.setSelectable(isSelectable());
		licenseImpl.setDescription(getDescription());

		licenseImpl.resetOriginalValues();

		return licenseImpl;
	}

	@Override
	public int compareTo(License license) {
		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof License)) {
			return false;
		}

		License license = (License)obj;

		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LicenseModelImpl licenseModelImpl = this;

		licenseModelImpl._originalSelectable = licenseModelImpl._selectable;

		licenseModelImpl._setOriginalSelectable = false;

		licenseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<License> toCacheModel() {
		LicenseCacheModel licenseCacheModel = new LicenseCacheModel();

		licenseCacheModel.licenseId = getLicenseId();

		licenseCacheModel.fullName = getFullName();

		String fullName = licenseCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			licenseCacheModel.fullName = null;
		}

		licenseCacheModel.shortIdentifier = getShortIdentifier();

		String shortIdentifier = licenseCacheModel.shortIdentifier;

		if ((shortIdentifier != null) && (shortIdentifier.length() == 0)) {
			licenseCacheModel.shortIdentifier = null;
		}

		licenseCacheModel.url = getUrl();

		String url = licenseCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			licenseCacheModel.url = null;
		}

		licenseCacheModel.schemeName = getSchemeName();

		String schemeName = licenseCacheModel.schemeName;

		if ((schemeName != null) && (schemeName.length() == 0)) {
			licenseCacheModel.schemeName = null;
		}

		licenseCacheModel.schemeUrl = getSchemeUrl();

		String schemeUrl = licenseCacheModel.schemeUrl;

		if ((schemeUrl != null) && (schemeUrl.length() == 0)) {
			licenseCacheModel.schemeUrl = null;
		}

		licenseCacheModel.selectable = isSelectable();

		licenseCacheModel.description = getDescription();

		String description = licenseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			licenseCacheModel.description = null;
		}

		return licenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((License)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((License)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, License>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _licenseId;
	private String _fullName;
	private String _shortIdentifier;
	private String _url;
	private String _schemeName;
	private String _schemeUrl;
	private boolean _selectable;
	private boolean _originalSelectable;
	private boolean _setOriginalSelectable;
	private String _description;
	private long _columnBitmask;
	private License _escapedModel;

}