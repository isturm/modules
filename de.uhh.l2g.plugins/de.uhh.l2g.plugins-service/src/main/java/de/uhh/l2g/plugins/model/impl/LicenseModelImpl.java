/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import de.uhh.l2g.plugins.model.License;
import de.uhh.l2g.plugins.model.LicenseModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the License service. Represents a row in the &quot;LG_License&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenseImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see LicenseImpl
 * @generated
 */
@ProviderType
public class LicenseModelImpl
	extends BaseModelImpl<License> implements LicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a license model instance should use the <code>License</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_License";

	public static final Object[][] TABLE_COLUMNS = {
		{"licenseId", Types.BIGINT}, {"videoId", Types.BIGINT},
		{"ccby", Types.INTEGER}, {"ccbybc", Types.INTEGER},
		{"ccbyncnd", Types.INTEGER}, {"ccbyncsa", Types.INTEGER},
		{"ccbysa", Types.INTEGER}, {"ccbync", Types.INTEGER},
		{"l2go", Types.INTEGER}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("licenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ccby", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccbybc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccbyncnd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccbyncsa", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccbysa", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ccbync", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("l2go", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_License (licenseId LONG not null primary key,videoId LONG,ccby INTEGER,ccbybc INTEGER,ccbyncnd INTEGER,ccbyncsa INTEGER,ccbysa INTEGER,ccbync INTEGER,l2go INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LG_License";

	public static final String ORDER_BY_JPQL =
		" ORDER BY license.licenseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_License.licenseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.License"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long VIDEOID_COLUMN_BITMASK = 4L;

	public static final long LICENSEID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.License"));

	public LicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return License.class;
	}

	@Override
	public String getModelClassName() {
		return License.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((License)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<License, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<License, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(License)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<License, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<License, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, License>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			License.class.getClassLoader(), License.class, ModelWrapper.class);

		try {
			Constructor<License> constructor =
				(Constructor<License>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<License, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<License, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<License, Object>>();
		Map<String, BiConsumer<License, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<License, ?>>();

		attributeGetterFunctions.put(
			"licenseId",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getLicenseId();
				}

			});
		attributeSetterBiConsumers.put(
			"licenseId",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object licenseId) {
					license.setLicenseId((Long)licenseId);
				}

			});
		attributeGetterFunctions.put(
			"videoId",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getVideoId();
				}

			});
		attributeSetterBiConsumers.put(
			"videoId",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object videoId) {
					license.setVideoId((Long)videoId);
				}

			});
		attributeGetterFunctions.put(
			"ccby",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcby();
				}

			});
		attributeSetterBiConsumers.put(
			"ccby",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccby) {
					license.setCcby((Integer)ccby);
				}

			});
		attributeGetterFunctions.put(
			"ccbybc",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcbybc();
				}

			});
		attributeSetterBiConsumers.put(
			"ccbybc",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccbybc) {
					license.setCcbybc((Integer)ccbybc);
				}

			});
		attributeGetterFunctions.put(
			"ccbyncnd",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcbyncnd();
				}

			});
		attributeSetterBiConsumers.put(
			"ccbyncnd",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccbyncnd) {
					license.setCcbyncnd((Integer)ccbyncnd);
				}

			});
		attributeGetterFunctions.put(
			"ccbyncsa",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcbyncsa();
				}

			});
		attributeSetterBiConsumers.put(
			"ccbyncsa",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccbyncsa) {
					license.setCcbyncsa((Integer)ccbyncsa);
				}

			});
		attributeGetterFunctions.put(
			"ccbysa",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcbysa();
				}

			});
		attributeSetterBiConsumers.put(
			"ccbysa",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccbysa) {
					license.setCcbysa((Integer)ccbysa);
				}

			});
		attributeGetterFunctions.put(
			"ccbync",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCcbync();
				}

			});
		attributeSetterBiConsumers.put(
			"ccbync",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object ccbync) {
					license.setCcbync((Integer)ccbync);
				}

			});
		attributeGetterFunctions.put(
			"l2go",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getL2go();
				}

			});
		attributeSetterBiConsumers.put(
			"l2go",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object l2go) {
					license.setL2go((Integer)l2go);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object groupId) {
					license.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object companyId) {
					license.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object userId) {
					license.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object userName) {
					license.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object createDate) {
					license.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<License, Object>() {

				@Override
				public Object apply(License license) {
					return license.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<License, Object>() {

				@Override
				public void accept(License license, Object modifiedDate) {
					license.setModifiedDate((Date)modifiedDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getLicenseId() {
		return _licenseId;
	}

	@Override
	public void setLicenseId(long licenseId) {
		_licenseId = licenseId;
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask |= VIDEOID_COLUMN_BITMASK;

		if (!_setOriginalVideoId) {
			_setOriginalVideoId = true;

			_originalVideoId = _videoId;
		}

		_videoId = videoId;
	}

	public long getOriginalVideoId() {
		return _originalVideoId;
	}

	@Override
	public int getCcby() {
		return _ccby;
	}

	@Override
	public void setCcby(int ccby) {
		_ccby = ccby;
	}

	@Override
	public int getCcbybc() {
		return _ccbybc;
	}

	@Override
	public void setCcbybc(int ccbybc) {
		_ccbybc = ccbybc;
	}

	@Override
	public int getCcbyncnd() {
		return _ccbyncnd;
	}

	@Override
	public void setCcbyncnd(int ccbyncnd) {
		_ccbyncnd = ccbyncnd;
	}

	@Override
	public int getCcbyncsa() {
		return _ccbyncsa;
	}

	@Override
	public void setCcbyncsa(int ccbyncsa) {
		_ccbyncsa = ccbyncsa;
	}

	@Override
	public int getCcbysa() {
		return _ccbysa;
	}

	@Override
	public void setCcbysa(int ccbysa) {
		_ccbysa = ccbysa;
	}

	@Override
	public int getCcbync() {
		return _ccbync;
	}

	@Override
	public void setCcbync(int ccbync) {
		_ccbync = ccbync;
	}

	@Override
	public int getL2go() {
		return _l2go;
	}

	@Override
	public void setL2go(int l2go) {
		_l2go = l2go;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), License.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public License toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenseImpl licenseImpl = new LicenseImpl();

		licenseImpl.setLicenseId(getLicenseId());
		licenseImpl.setVideoId(getVideoId());
		licenseImpl.setCcby(getCcby());
		licenseImpl.setCcbybc(getCcbybc());
		licenseImpl.setCcbyncnd(getCcbyncnd());
		licenseImpl.setCcbyncsa(getCcbyncsa());
		licenseImpl.setCcbysa(getCcbysa());
		licenseImpl.setCcbync(getCcbync());
		licenseImpl.setL2go(getL2go());
		licenseImpl.setGroupId(getGroupId());
		licenseImpl.setCompanyId(getCompanyId());
		licenseImpl.setUserId(getUserId());
		licenseImpl.setUserName(getUserName());
		licenseImpl.setCreateDate(getCreateDate());
		licenseImpl.setModifiedDate(getModifiedDate());

		licenseImpl.resetOriginalValues();

		return licenseImpl;
	}

	@Override
	public int compareTo(License license) {
		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof License)) {
			return false;
		}

		License license = (License)obj;

		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LicenseModelImpl licenseModelImpl = this;

		licenseModelImpl._originalVideoId = licenseModelImpl._videoId;

		licenseModelImpl._setOriginalVideoId = false;

		licenseModelImpl._originalGroupId = licenseModelImpl._groupId;

		licenseModelImpl._setOriginalGroupId = false;

		licenseModelImpl._originalCompanyId = licenseModelImpl._companyId;

		licenseModelImpl._setOriginalCompanyId = false;

		licenseModelImpl._setModifiedDate = false;

		licenseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<License> toCacheModel() {
		LicenseCacheModel licenseCacheModel = new LicenseCacheModel();

		licenseCacheModel.licenseId = getLicenseId();

		licenseCacheModel.videoId = getVideoId();

		licenseCacheModel.ccby = getCcby();

		licenseCacheModel.ccbybc = getCcbybc();

		licenseCacheModel.ccbyncnd = getCcbyncnd();

		licenseCacheModel.ccbyncsa = getCcbyncsa();

		licenseCacheModel.ccbysa = getCcbysa();

		licenseCacheModel.ccbync = getCcbync();

		licenseCacheModel.l2go = getL2go();

		licenseCacheModel.groupId = getGroupId();

		licenseCacheModel.companyId = getCompanyId();

		licenseCacheModel.userId = getUserId();

		licenseCacheModel.userName = getUserName();

		String userName = licenseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			licenseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			licenseCacheModel.createDate = createDate.getTime();
		}
		else {
			licenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			licenseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			licenseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return licenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((License)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<License, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<License, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<License, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((License)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, License>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _licenseId;
	private long _videoId;
	private long _originalVideoId;
	private boolean _setOriginalVideoId;
	private int _ccby;
	private int _ccbybc;
	private int _ccbyncnd;
	private int _ccbyncsa;
	private int _ccbysa;
	private int _ccbync;
	private int _l2go;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private License _escapedModel;

}