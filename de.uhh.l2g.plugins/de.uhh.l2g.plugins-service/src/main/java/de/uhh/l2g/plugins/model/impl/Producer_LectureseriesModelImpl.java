/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.Producer_Lectureseries;
import de.uhh.l2g.plugins.model.Producer_LectureseriesModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Producer_Lectureseries service. Represents a row in the &quot;LG_Producer_Lectureseries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>Producer_LectureseriesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Producer_LectureseriesImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see Producer_LectureseriesImpl
 * @generated
 */
@ProviderType
public class Producer_LectureseriesModelImpl
	extends BaseModelImpl<Producer_Lectureseries>
	implements Producer_LectureseriesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a producer_ lectureseries model instance should use the <code>Producer_Lectureseries</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Producer_Lectureseries";

	public static final Object[][] TABLE_COLUMNS = {
		{"producerLectureseriesId", Types.BIGINT},
		{"lectureseriesId", Types.BIGINT}, {"producerId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("producerLectureseriesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lectureseriesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("producerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Producer_Lectureseries (producerLectureseriesId LONG not null primary key,lectureseriesId LONG,producerId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table LG_Producer_Lectureseries";

	public static final String ORDER_BY_JPQL =
		" ORDER BY producer_Lectureseries.producerLectureseriesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Producer_Lectureseries.producerLectureseriesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Producer_Lectureseries"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Producer_Lectureseries"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Producer_Lectureseries"),
		true);

	public static final long LECTURESERIESID_COLUMN_BITMASK = 1L;

	public static final long PRODUCERID_COLUMN_BITMASK = 2L;

	public static final long PRODUCERLECTURESERIESID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Producer_Lectureseries"));

	public Producer_LectureseriesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _producerLectureseriesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProducerLectureseriesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _producerLectureseriesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Producer_Lectureseries.class;
	}

	@Override
	public String getModelClassName() {
		return Producer_Lectureseries.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Producer_Lectureseries, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Producer_Lectureseries, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer_Lectureseries, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Producer_Lectureseries)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Producer_Lectureseries, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Producer_Lectureseries, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Producer_Lectureseries)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Producer_Lectureseries, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Producer_Lectureseries, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Producer_Lectureseries>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Producer_Lectureseries.class.getClassLoader(),
			Producer_Lectureseries.class, ModelWrapper.class);

		try {
			Constructor<Producer_Lectureseries> constructor =
				(Constructor<Producer_Lectureseries>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Producer_Lectureseries, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Producer_Lectureseries, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Producer_Lectureseries, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<Producer_Lectureseries, Object>>();
		Map<String, BiConsumer<Producer_Lectureseries, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<Producer_Lectureseries, ?>>();

		attributeGetterFunctions.put(
			"producerLectureseriesId",
			Producer_Lectureseries::getProducerLectureseriesId);
		attributeSetterBiConsumers.put(
			"producerLectureseriesId",
			(BiConsumer<Producer_Lectureseries, Long>)
				Producer_Lectureseries::setProducerLectureseriesId);
		attributeGetterFunctions.put(
			"lectureseriesId", Producer_Lectureseries::getLectureseriesId);
		attributeSetterBiConsumers.put(
			"lectureseriesId",
			(BiConsumer<Producer_Lectureseries, Long>)
				Producer_Lectureseries::setLectureseriesId);
		attributeGetterFunctions.put(
			"producerId", Producer_Lectureseries::getProducerId);
		attributeSetterBiConsumers.put(
			"producerId",
			(BiConsumer<Producer_Lectureseries, Long>)
				Producer_Lectureseries::setProducerId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getProducerLectureseriesId() {
		return _producerLectureseriesId;
	}

	@Override
	public void setProducerLectureseriesId(long producerLectureseriesId) {
		_producerLectureseriesId = producerLectureseriesId;
	}

	@Override
	public long getLectureseriesId() {
		return _lectureseriesId;
	}

	@Override
	public void setLectureseriesId(long lectureseriesId) {
		_columnBitmask |= LECTURESERIESID_COLUMN_BITMASK;

		if (!_setOriginalLectureseriesId) {
			_setOriginalLectureseriesId = true;

			_originalLectureseriesId = _lectureseriesId;
		}

		_lectureseriesId = lectureseriesId;
	}

	public long getOriginalLectureseriesId() {
		return _originalLectureseriesId;
	}

	@Override
	public long getProducerId() {
		return _producerId;
	}

	@Override
	public void setProducerId(long producerId) {
		_columnBitmask |= PRODUCERID_COLUMN_BITMASK;

		if (!_setOriginalProducerId) {
			_setOriginalProducerId = true;

			_originalProducerId = _producerId;
		}

		_producerId = producerId;
	}

	public long getOriginalProducerId() {
		return _originalProducerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Producer_Lectureseries.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Producer_Lectureseries toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Producer_LectureseriesImpl producer_LectureseriesImpl =
			new Producer_LectureseriesImpl();

		producer_LectureseriesImpl.setProducerLectureseriesId(
			getProducerLectureseriesId());
		producer_LectureseriesImpl.setLectureseriesId(getLectureseriesId());
		producer_LectureseriesImpl.setProducerId(getProducerId());

		producer_LectureseriesImpl.resetOriginalValues();

		return producer_LectureseriesImpl;
	}

	@Override
	public int compareTo(Producer_Lectureseries producer_Lectureseries) {
		long primaryKey = producer_Lectureseries.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Producer_Lectureseries)) {
			return false;
		}

		Producer_Lectureseries producer_Lectureseries =
			(Producer_Lectureseries)obj;

		long primaryKey = producer_Lectureseries.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Producer_LectureseriesModelImpl producer_LectureseriesModelImpl = this;

		producer_LectureseriesModelImpl._originalLectureseriesId =
			producer_LectureseriesModelImpl._lectureseriesId;

		producer_LectureseriesModelImpl._setOriginalLectureseriesId = false;

		producer_LectureseriesModelImpl._originalProducerId =
			producer_LectureseriesModelImpl._producerId;

		producer_LectureseriesModelImpl._setOriginalProducerId = false;

		producer_LectureseriesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Producer_Lectureseries> toCacheModel() {
		Producer_LectureseriesCacheModel producer_LectureseriesCacheModel =
			new Producer_LectureseriesCacheModel();

		producer_LectureseriesCacheModel.producerLectureseriesId =
			getProducerLectureseriesId();

		producer_LectureseriesCacheModel.lectureseriesId = getLectureseriesId();

		producer_LectureseriesCacheModel.producerId = getProducerId();

		return producer_LectureseriesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Producer_Lectureseries, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Producer_Lectureseries, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer_Lectureseries, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((Producer_Lectureseries)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Producer_Lectureseries, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Producer_Lectureseries, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Producer_Lectureseries, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((Producer_Lectureseries)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Producer_Lectureseries>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _producerLectureseriesId;
	private long _lectureseriesId;
	private long _originalLectureseriesId;
	private boolean _setOriginalLectureseriesId;
	private long _producerId;
	private long _originalProducerId;
	private boolean _setOriginalProducerId;
	private long _columnBitmask;
	private Producer_Lectureseries _escapedModel;

}