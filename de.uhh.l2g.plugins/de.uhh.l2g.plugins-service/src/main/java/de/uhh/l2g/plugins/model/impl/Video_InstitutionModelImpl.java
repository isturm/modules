/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import de.uhh.l2g.plugins.model.Video_Institution;
import de.uhh.l2g.plugins.model.Video_InstitutionModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Video_Institution service. Represents a row in the &quot;LG_Video_Institution&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>Video_InstitutionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Video_InstitutionImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see Video_InstitutionImpl
 * @generated
 */
@ProviderType
public class Video_InstitutionModelImpl
	extends BaseModelImpl<Video_Institution> implements Video_InstitutionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video_ institution model instance should use the <code>Video_Institution</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Video_Institution";

	public static final Object[][] TABLE_COLUMNS = {
		{"videoInstitutionId", Types.BIGINT}, {"videoId", Types.BIGINT},
		{"institutionId", Types.BIGINT}, {"institutionParentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("videoInstitutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("institutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("institutionParentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Video_Institution (videoInstitutionId LONG not null primary key,videoId LONG,institutionId LONG,institutionParentId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table LG_Video_Institution";

	public static final String ORDER_BY_JPQL =
		" ORDER BY video_Institution.videoInstitutionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Video_Institution.videoInstitutionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Video_Institution"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Video_Institution"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Video_Institution"),
		true);

	public static final long INSTITUTIONID_COLUMN_BITMASK = 1L;

	public static final long INSTITUTIONPARENTID_COLUMN_BITMASK = 2L;

	public static final long VIDEOID_COLUMN_BITMASK = 4L;

	public static final long VIDEOINSTITUTIONID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Video_Institution"));

	public Video_InstitutionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _videoInstitutionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVideoInstitutionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _videoInstitutionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Video_Institution.class;
	}

	@Override
	public String getModelClassName() {
		return Video_Institution.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Video_Institution, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Video_Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video_Institution, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Video_Institution)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Video_Institution, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Video_Institution, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Video_Institution)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Video_Institution, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Video_Institution, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Video_Institution>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Video_Institution.class.getClassLoader(), Video_Institution.class,
			ModelWrapper.class);

		try {
			Constructor<Video_Institution> constructor =
				(Constructor<Video_Institution>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Video_Institution, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Video_Institution, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Video_Institution, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<Video_Institution, Object>>();
		Map<String, BiConsumer<Video_Institution, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Video_Institution, ?>>();

		attributeGetterFunctions.put(
			"videoInstitutionId",
			new Function<Video_Institution, Object>() {

				@Override
				public Object apply(Video_Institution video_Institution) {
					return video_Institution.getVideoInstitutionId();
				}

			});
		attributeSetterBiConsumers.put(
			"videoInstitutionId",
			new BiConsumer<Video_Institution, Object>() {

				@Override
				public void accept(
					Video_Institution video_Institution,
					Object videoInstitutionId) {

					video_Institution.setVideoInstitutionId(
						(Long)videoInstitutionId);
				}

			});
		attributeGetterFunctions.put(
			"videoId",
			new Function<Video_Institution, Object>() {

				@Override
				public Object apply(Video_Institution video_Institution) {
					return video_Institution.getVideoId();
				}

			});
		attributeSetterBiConsumers.put(
			"videoId",
			new BiConsumer<Video_Institution, Object>() {

				@Override
				public void accept(
					Video_Institution video_Institution, Object videoId) {

					video_Institution.setVideoId((Long)videoId);
				}

			});
		attributeGetterFunctions.put(
			"institutionId",
			new Function<Video_Institution, Object>() {

				@Override
				public Object apply(Video_Institution video_Institution) {
					return video_Institution.getInstitutionId();
				}

			});
		attributeSetterBiConsumers.put(
			"institutionId",
			new BiConsumer<Video_Institution, Object>() {

				@Override
				public void accept(
					Video_Institution video_Institution, Object institutionId) {

					video_Institution.setInstitutionId((Long)institutionId);
				}

			});
		attributeGetterFunctions.put(
			"institutionParentId",
			new Function<Video_Institution, Object>() {

				@Override
				public Object apply(Video_Institution video_Institution) {
					return video_Institution.getInstitutionParentId();
				}

			});
		attributeSetterBiConsumers.put(
			"institutionParentId",
			new BiConsumer<Video_Institution, Object>() {

				@Override
				public void accept(
					Video_Institution video_Institution,
					Object institutionParentId) {

					video_Institution.setInstitutionParentId(
						(Long)institutionParentId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getVideoInstitutionId() {
		return _videoInstitutionId;
	}

	@Override
	public void setVideoInstitutionId(long videoInstitutionId) {
		_videoInstitutionId = videoInstitutionId;
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask |= VIDEOID_COLUMN_BITMASK;

		if (!_setOriginalVideoId) {
			_setOriginalVideoId = true;

			_originalVideoId = _videoId;
		}

		_videoId = videoId;
	}

	public long getOriginalVideoId() {
		return _originalVideoId;
	}

	@Override
	public long getInstitutionId() {
		return _institutionId;
	}

	@Override
	public void setInstitutionId(long institutionId) {
		_columnBitmask |= INSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionId) {
			_setOriginalInstitutionId = true;

			_originalInstitutionId = _institutionId;
		}

		_institutionId = institutionId;
	}

	public long getOriginalInstitutionId() {
		return _originalInstitutionId;
	}

	@Override
	public long getInstitutionParentId() {
		return _institutionParentId;
	}

	@Override
	public void setInstitutionParentId(long institutionParentId) {
		_columnBitmask |= INSTITUTIONPARENTID_COLUMN_BITMASK;

		if (!_setOriginalInstitutionParentId) {
			_setOriginalInstitutionParentId = true;

			_originalInstitutionParentId = _institutionParentId;
		}

		_institutionParentId = institutionParentId;
	}

	public long getOriginalInstitutionParentId() {
		return _originalInstitutionParentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Video_Institution.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Video_Institution toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Video_InstitutionImpl video_InstitutionImpl =
			new Video_InstitutionImpl();

		video_InstitutionImpl.setVideoInstitutionId(getVideoInstitutionId());
		video_InstitutionImpl.setVideoId(getVideoId());
		video_InstitutionImpl.setInstitutionId(getInstitutionId());
		video_InstitutionImpl.setInstitutionParentId(getInstitutionParentId());

		video_InstitutionImpl.resetOriginalValues();

		return video_InstitutionImpl;
	}

	@Override
	public int compareTo(Video_Institution video_Institution) {
		long primaryKey = video_Institution.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Video_Institution)) {
			return false;
		}

		Video_Institution video_Institution = (Video_Institution)obj;

		long primaryKey = video_Institution.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Video_InstitutionModelImpl video_InstitutionModelImpl = this;

		video_InstitutionModelImpl._originalVideoId =
			video_InstitutionModelImpl._videoId;

		video_InstitutionModelImpl._setOriginalVideoId = false;

		video_InstitutionModelImpl._originalInstitutionId =
			video_InstitutionModelImpl._institutionId;

		video_InstitutionModelImpl._setOriginalInstitutionId = false;

		video_InstitutionModelImpl._originalInstitutionParentId =
			video_InstitutionModelImpl._institutionParentId;

		video_InstitutionModelImpl._setOriginalInstitutionParentId = false;

		video_InstitutionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Video_Institution> toCacheModel() {
		Video_InstitutionCacheModel video_InstitutionCacheModel =
			new Video_InstitutionCacheModel();

		video_InstitutionCacheModel.videoInstitutionId =
			getVideoInstitutionId();

		video_InstitutionCacheModel.videoId = getVideoId();

		video_InstitutionCacheModel.institutionId = getInstitutionId();

		video_InstitutionCacheModel.institutionParentId =
			getInstitutionParentId();

		return video_InstitutionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Video_Institution, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Video_Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video_Institution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Video_Institution)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Video_Institution, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Video_Institution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video_Institution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Video_Institution)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Video_Institution>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _videoInstitutionId;
	private long _videoId;
	private long _originalVideoId;
	private boolean _setOriginalVideoId;
	private long _institutionId;
	private long _originalInstitutionId;
	private boolean _setOriginalInstitutionId;
	private long _institutionParentId;
	private long _originalInstitutionParentId;
	private boolean _setOriginalInstitutionParentId;
	private long _columnBitmask;
	private Video_Institution _escapedModel;

}