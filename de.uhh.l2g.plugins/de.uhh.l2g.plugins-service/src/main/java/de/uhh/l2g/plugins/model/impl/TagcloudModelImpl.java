/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import de.uhh.l2g.plugins.model.Tagcloud;
import de.uhh.l2g.plugins.model.TagcloudModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Tagcloud service. Represents a row in the &quot;LG_Tagcloud&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TagcloudModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TagcloudImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see TagcloudImpl
 * @generated
 */
@ProviderType
public class TagcloudModelImpl
	extends BaseModelImpl<Tagcloud> implements TagcloudModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tagcloud model instance should use the <code>Tagcloud</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Tagcloud";

	public static final Object[][] TABLE_COLUMNS = {
		{"tagcloudId", Types.BIGINT}, {"objectClassType", Types.VARCHAR},
		{"objectId", Types.BIGINT}, {"tags", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tagcloudId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("objectClassType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("objectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Tagcloud (tagcloudId LONG not null primary key,objectClassType VARCHAR(75) null,objectId LONG,tags VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LG_Tagcloud";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tagcloud.tagcloudId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Tagcloud.tagcloudId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Tagcloud"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Tagcloud"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Tagcloud"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long OBJECTCLASSTYPE_COLUMN_BITMASK = 4L;

	public static final long OBJECTID_COLUMN_BITMASK = 8L;

	public static final long TAGCLOUDID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Tagcloud"));

	public TagcloudModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tagcloudId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTagcloudId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tagcloudId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tagcloud.class;
	}

	@Override
	public String getModelClassName() {
		return Tagcloud.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Tagcloud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Tagcloud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tagcloud, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Tagcloud)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Tagcloud, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Tagcloud, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Tagcloud)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Tagcloud, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Tagcloud, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Tagcloud>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Tagcloud.class.getClassLoader(), Tagcloud.class,
			ModelWrapper.class);

		try {
			Constructor<Tagcloud> constructor =
				(Constructor<Tagcloud>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Tagcloud, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Tagcloud, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Tagcloud, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Tagcloud, Object>>();
		Map<String, BiConsumer<Tagcloud, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Tagcloud, ?>>();

		attributeGetterFunctions.put(
			"tagcloudId",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getTagcloudId();
				}

			});
		attributeSetterBiConsumers.put(
			"tagcloudId",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object tagcloudId) {
					tagcloud.setTagcloudId((Long)tagcloudId);
				}

			});
		attributeGetterFunctions.put(
			"objectClassType",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getObjectClassType();
				}

			});
		attributeSetterBiConsumers.put(
			"objectClassType",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object objectClassType) {
					tagcloud.setObjectClassType((String)objectClassType);
				}

			});
		attributeGetterFunctions.put(
			"objectId",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getObjectId();
				}

			});
		attributeSetterBiConsumers.put(
			"objectId",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object objectId) {
					tagcloud.setObjectId((Long)objectId);
				}

			});
		attributeGetterFunctions.put(
			"tags",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getTags();
				}

			});
		attributeSetterBiConsumers.put(
			"tags",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object tags) {
					tagcloud.setTags((String)tags);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object groupId) {
					tagcloud.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object companyId) {
					tagcloud.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object userId) {
					tagcloud.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object userName) {
					tagcloud.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object createDate) {
					tagcloud.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Tagcloud, Object>() {

				@Override
				public Object apply(Tagcloud tagcloud) {
					return tagcloud.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Tagcloud, Object>() {

				@Override
				public void accept(Tagcloud tagcloud, Object modifiedDate) {
					tagcloud.setModifiedDate((Date)modifiedDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTagcloudId() {
		return _tagcloudId;
	}

	@Override
	public void setTagcloudId(long tagcloudId) {
		_tagcloudId = tagcloudId;
	}

	@Override
	public String getObjectClassType() {
		if (_objectClassType == null) {
			return "";
		}
		else {
			return _objectClassType;
		}
	}

	@Override
	public void setObjectClassType(String objectClassType) {
		_columnBitmask |= OBJECTCLASSTYPE_COLUMN_BITMASK;

		if (_originalObjectClassType == null) {
			_originalObjectClassType = _objectClassType;
		}

		_objectClassType = objectClassType;
	}

	public String getOriginalObjectClassType() {
		return GetterUtil.getString(_originalObjectClassType);
	}

	@Override
	public long getObjectId() {
		return _objectId;
	}

	@Override
	public void setObjectId(long objectId) {
		_columnBitmask |= OBJECTID_COLUMN_BITMASK;

		if (!_setOriginalObjectId) {
			_setOriginalObjectId = true;

			_originalObjectId = _objectId;
		}

		_objectId = objectId;
	}

	public long getOriginalObjectId() {
		return _originalObjectId;
	}

	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Tagcloud.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tagcloud toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TagcloudImpl tagcloudImpl = new TagcloudImpl();

		tagcloudImpl.setTagcloudId(getTagcloudId());
		tagcloudImpl.setObjectClassType(getObjectClassType());
		tagcloudImpl.setObjectId(getObjectId());
		tagcloudImpl.setTags(getTags());
		tagcloudImpl.setGroupId(getGroupId());
		tagcloudImpl.setCompanyId(getCompanyId());
		tagcloudImpl.setUserId(getUserId());
		tagcloudImpl.setUserName(getUserName());
		tagcloudImpl.setCreateDate(getCreateDate());
		tagcloudImpl.setModifiedDate(getModifiedDate());

		tagcloudImpl.resetOriginalValues();

		return tagcloudImpl;
	}

	@Override
	public int compareTo(Tagcloud tagcloud) {
		long primaryKey = tagcloud.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tagcloud)) {
			return false;
		}

		Tagcloud tagcloud = (Tagcloud)obj;

		long primaryKey = tagcloud.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TagcloudModelImpl tagcloudModelImpl = this;

		tagcloudModelImpl._originalObjectClassType =
			tagcloudModelImpl._objectClassType;

		tagcloudModelImpl._originalObjectId = tagcloudModelImpl._objectId;

		tagcloudModelImpl._setOriginalObjectId = false;

		tagcloudModelImpl._originalGroupId = tagcloudModelImpl._groupId;

		tagcloudModelImpl._setOriginalGroupId = false;

		tagcloudModelImpl._originalCompanyId = tagcloudModelImpl._companyId;

		tagcloudModelImpl._setOriginalCompanyId = false;

		tagcloudModelImpl._setModifiedDate = false;

		tagcloudModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Tagcloud> toCacheModel() {
		TagcloudCacheModel tagcloudCacheModel = new TagcloudCacheModel();

		tagcloudCacheModel.tagcloudId = getTagcloudId();

		tagcloudCacheModel.objectClassType = getObjectClassType();

		String objectClassType = tagcloudCacheModel.objectClassType;

		if ((objectClassType != null) && (objectClassType.length() == 0)) {
			tagcloudCacheModel.objectClassType = null;
		}

		tagcloudCacheModel.objectId = getObjectId();

		tagcloudCacheModel.tags = getTags();

		String tags = tagcloudCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			tagcloudCacheModel.tags = null;
		}

		tagcloudCacheModel.groupId = getGroupId();

		tagcloudCacheModel.companyId = getCompanyId();

		tagcloudCacheModel.userId = getUserId();

		tagcloudCacheModel.userName = getUserName();

		String userName = tagcloudCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tagcloudCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tagcloudCacheModel.createDate = createDate.getTime();
		}
		else {
			tagcloudCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tagcloudCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tagcloudCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return tagcloudCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Tagcloud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Tagcloud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tagcloud, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Tagcloud)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Tagcloud, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Tagcloud, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Tagcloud, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Tagcloud)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Tagcloud>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _tagcloudId;
	private String _objectClassType;
	private String _originalObjectClassType;
	private long _objectId;
	private long _originalObjectId;
	private boolean _setOriginalObjectId;
	private String _tags;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Tagcloud _escapedModel;

}