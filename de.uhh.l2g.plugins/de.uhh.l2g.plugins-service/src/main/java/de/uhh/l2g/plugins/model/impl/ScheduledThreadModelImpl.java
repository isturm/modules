/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.ScheduledThread;
import de.uhh.l2g.plugins.model.ScheduledThreadModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the ScheduledThread service. Represents a row in the &quot;LG_ScheduledThread&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ScheduledThreadModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScheduledThreadImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see ScheduledThreadImpl
 * @generated
 */
@ProviderType
public class ScheduledThreadModelImpl
	extends BaseModelImpl<ScheduledThread> implements ScheduledThreadModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scheduled thread model instance should use the <code>ScheduledThread</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_ScheduledThread";

	public static final Object[][] TABLE_COLUMNS = {
		{"scheduledThreadId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"schedulerClassName", Types.VARCHAR}, {"cronText", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("scheduledThreadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("schedulerClassName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cronText", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_ScheduledThread (scheduledThreadId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,schedulerClassName VARCHAR(75) null,cronText VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table LG_ScheduledThread";

	public static final String ORDER_BY_JPQL =
		" ORDER BY scheduledThread.scheduledThreadId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_ScheduledThread.scheduledThreadId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.ScheduledThread"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.ScheduledThread"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.ScheduledThread"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long SCHEDULERCLASSNAME_COLUMN_BITMASK = 4L;

	public static final long SCHEDULEDTHREADID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.ScheduledThread"));

	public ScheduledThreadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scheduledThreadId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScheduledThreadId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scheduledThreadId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScheduledThread.class;
	}

	@Override
	public String getModelClassName() {
		return ScheduledThread.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ScheduledThread, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ScheduledThread, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ScheduledThread, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ScheduledThread)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ScheduledThread, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ScheduledThread, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ScheduledThread)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ScheduledThread, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ScheduledThread, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ScheduledThread>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ScheduledThread.class.getClassLoader(), ScheduledThread.class,
			ModelWrapper.class);

		try {
			Constructor<ScheduledThread> constructor =
				(Constructor<ScheduledThread>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ScheduledThread, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ScheduledThread, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ScheduledThread, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ScheduledThread, Object>>();
		Map<String, BiConsumer<ScheduledThread, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ScheduledThread, ?>>();

		attributeGetterFunctions.put(
			"scheduledThreadId", ScheduledThread::getScheduledThreadId);
		attributeSetterBiConsumers.put(
			"scheduledThreadId",
			(BiConsumer<ScheduledThread, Long>)
				ScheduledThread::setScheduledThreadId);
		attributeGetterFunctions.put("groupId", ScheduledThread::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ScheduledThread, Long>)ScheduledThread::setGroupId);
		attributeGetterFunctions.put(
			"companyId", ScheduledThread::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ScheduledThread, Long>)ScheduledThread::setCompanyId);
		attributeGetterFunctions.put("userId", ScheduledThread::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ScheduledThread, Long>)ScheduledThread::setUserId);
		attributeGetterFunctions.put("userName", ScheduledThread::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ScheduledThread, String>)ScheduledThread::setUserName);
		attributeGetterFunctions.put(
			"createDate", ScheduledThread::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ScheduledThread, Date>)ScheduledThread::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ScheduledThread::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ScheduledThread, Date>)
				ScheduledThread::setModifiedDate);
		attributeGetterFunctions.put(
			"schedulerClassName", ScheduledThread::getSchedulerClassName);
		attributeSetterBiConsumers.put(
			"schedulerClassName",
			(BiConsumer<ScheduledThread, String>)
				ScheduledThread::setSchedulerClassName);
		attributeGetterFunctions.put("cronText", ScheduledThread::getCronText);
		attributeSetterBiConsumers.put(
			"cronText",
			(BiConsumer<ScheduledThread, String>)ScheduledThread::setCronText);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getScheduledThreadId() {
		return _scheduledThreadId;
	}

	@Override
	public void setScheduledThreadId(long scheduledThreadId) {
		_scheduledThreadId = scheduledThreadId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSchedulerClassName() {
		if (_schedulerClassName == null) {
			return "";
		}
		else {
			return _schedulerClassName;
		}
	}

	@Override
	public void setSchedulerClassName(String schedulerClassName) {
		_columnBitmask |= SCHEDULERCLASSNAME_COLUMN_BITMASK;

		if (_originalSchedulerClassName == null) {
			_originalSchedulerClassName = _schedulerClassName;
		}

		_schedulerClassName = schedulerClassName;
	}

	public String getOriginalSchedulerClassName() {
		return GetterUtil.getString(_originalSchedulerClassName);
	}

	@Override
	public String getCronText() {
		if (_cronText == null) {
			return "";
		}
		else {
			return _cronText;
		}
	}

	@Override
	public void setCronText(String cronText) {
		_cronText = cronText;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ScheduledThread.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ScheduledThread toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScheduledThreadImpl scheduledThreadImpl = new ScheduledThreadImpl();

		scheduledThreadImpl.setScheduledThreadId(getScheduledThreadId());
		scheduledThreadImpl.setGroupId(getGroupId());
		scheduledThreadImpl.setCompanyId(getCompanyId());
		scheduledThreadImpl.setUserId(getUserId());
		scheduledThreadImpl.setUserName(getUserName());
		scheduledThreadImpl.setCreateDate(getCreateDate());
		scheduledThreadImpl.setModifiedDate(getModifiedDate());
		scheduledThreadImpl.setSchedulerClassName(getSchedulerClassName());
		scheduledThreadImpl.setCronText(getCronText());

		scheduledThreadImpl.resetOriginalValues();

		return scheduledThreadImpl;
	}

	@Override
	public int compareTo(ScheduledThread scheduledThread) {
		long primaryKey = scheduledThread.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScheduledThread)) {
			return false;
		}

		ScheduledThread scheduledThread = (ScheduledThread)obj;

		long primaryKey = scheduledThread.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ScheduledThreadModelImpl scheduledThreadModelImpl = this;

		scheduledThreadModelImpl._originalGroupId =
			scheduledThreadModelImpl._groupId;

		scheduledThreadModelImpl._setOriginalGroupId = false;

		scheduledThreadModelImpl._originalCompanyId =
			scheduledThreadModelImpl._companyId;

		scheduledThreadModelImpl._setOriginalCompanyId = false;

		scheduledThreadModelImpl._setModifiedDate = false;

		scheduledThreadModelImpl._originalSchedulerClassName =
			scheduledThreadModelImpl._schedulerClassName;

		scheduledThreadModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScheduledThread> toCacheModel() {
		ScheduledThreadCacheModel scheduledThreadCacheModel =
			new ScheduledThreadCacheModel();

		scheduledThreadCacheModel.scheduledThreadId = getScheduledThreadId();

		scheduledThreadCacheModel.groupId = getGroupId();

		scheduledThreadCacheModel.companyId = getCompanyId();

		scheduledThreadCacheModel.userId = getUserId();

		scheduledThreadCacheModel.userName = getUserName();

		String userName = scheduledThreadCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			scheduledThreadCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			scheduledThreadCacheModel.createDate = createDate.getTime();
		}
		else {
			scheduledThreadCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			scheduledThreadCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			scheduledThreadCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		scheduledThreadCacheModel.schedulerClassName = getSchedulerClassName();

		String schedulerClassName =
			scheduledThreadCacheModel.schedulerClassName;

		if ((schedulerClassName != null) &&
			(schedulerClassName.length() == 0)) {

			scheduledThreadCacheModel.schedulerClassName = null;
		}

		scheduledThreadCacheModel.cronText = getCronText();

		String cronText = scheduledThreadCacheModel.cronText;

		if ((cronText != null) && (cronText.length() == 0)) {
			scheduledThreadCacheModel.cronText = null;
		}

		return scheduledThreadCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ScheduledThread, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ScheduledThread, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ScheduledThread, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ScheduledThread)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ScheduledThread, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ScheduledThread, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ScheduledThread, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ScheduledThread)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ScheduledThread>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _scheduledThreadId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _schedulerClassName;
	private String _originalSchedulerClassName;
	private String _cronText;
	private long _columnBitmask;
	private ScheduledThread _escapedModel;

}