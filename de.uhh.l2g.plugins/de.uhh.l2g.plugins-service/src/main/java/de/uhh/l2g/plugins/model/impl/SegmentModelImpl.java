/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import de.uhh.l2g.plugins.model.Segment;
import de.uhh.l2g.plugins.model.SegmentModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Segment service. Represents a row in the &quot;LG_Segment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SegmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SegmentImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see SegmentImpl
 * @generated
 */
@ProviderType
public class SegmentModelImpl
	extends BaseModelImpl<Segment> implements SegmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a segment model instance should use the <code>Segment</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Segment";

	public static final Object[][] TABLE_COLUMNS = {
		{"segmentId", Types.BIGINT}, {"videoId", Types.BIGINT},
		{"start_", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"end_", Types.VARCHAR},
		{"chapter", Types.INTEGER}, {"userId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("segmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("start_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("end_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chapter", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Segment (segmentId LONG not null primary key,videoId LONG,start_ VARCHAR(75) null,title VARCHAR(75) null,description VARCHAR(75) null,end_ VARCHAR(75) null,chapter INTEGER,userId LONG,groupId LONG,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LG_Segment";

	public static final String ORDER_BY_JPQL = " ORDER BY segment.start ASC";

	public static final String ORDER_BY_SQL = " ORDER BY LG_Segment.start_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Segment"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Segment"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Segment"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long USERID_COLUMN_BITMASK = 4L;

	public static final long VIDEOID_COLUMN_BITMASK = 8L;

	public static final long START_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Segment"));

	public SegmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _segmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSegmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _segmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Segment.class;
	}

	@Override
	public String getModelClassName() {
		return Segment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Segment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Segment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Segment)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Segment, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Segment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Segment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Segment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Segment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Segment>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Segment.class.getClassLoader(), Segment.class, ModelWrapper.class);

		try {
			Constructor<Segment> constructor =
				(Constructor<Segment>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Segment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Segment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Segment, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Segment, Object>>();
		Map<String, BiConsumer<Segment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Segment, ?>>();

		attributeGetterFunctions.put(
			"segmentId",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getSegmentId();
				}

			});
		attributeSetterBiConsumers.put(
			"segmentId",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object segmentId) {
					segment.setSegmentId((Long)segmentId);
				}

			});
		attributeGetterFunctions.put(
			"videoId",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getVideoId();
				}

			});
		attributeSetterBiConsumers.put(
			"videoId",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object videoId) {
					segment.setVideoId((Long)videoId);
				}

			});
		attributeGetterFunctions.put(
			"start",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getStart();
				}

			});
		attributeSetterBiConsumers.put(
			"start",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object start) {
					segment.setStart((String)start);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object title) {
					segment.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object description) {
					segment.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"end",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getEnd();
				}

			});
		attributeSetterBiConsumers.put(
			"end",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object end) {
					segment.setEnd((String)end);
				}

			});
		attributeGetterFunctions.put(
			"chapter",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getChapter();
				}

			});
		attributeSetterBiConsumers.put(
			"chapter",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object chapter) {
					segment.setChapter((Integer)chapter);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object userId) {
					segment.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object groupId) {
					segment.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object companyId) {
					segment.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object userName) {
					segment.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object createDate) {
					segment.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Segment, Object>() {

				@Override
				public Object apply(Segment segment) {
					return segment.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Segment, Object>() {

				@Override
				public void accept(Segment segment, Object modifiedDate) {
					segment.setModifiedDate((Date)modifiedDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSegmentId() {
		return _segmentId;
	}

	@Override
	public void setSegmentId(long segmentId) {
		_segmentId = segmentId;
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask |= VIDEOID_COLUMN_BITMASK;

		if (!_setOriginalVideoId) {
			_setOriginalVideoId = true;

			_originalVideoId = _videoId;
		}

		_videoId = videoId;
	}

	public long getOriginalVideoId() {
		return _originalVideoId;
	}

	@Override
	public String getStart() {
		if (_start == null) {
			return "";
		}
		else {
			return _start;
		}
	}

	@Override
	public void setStart(String start) {
		_columnBitmask = -1L;

		_start = start;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getEnd() {
		if (_end == null) {
			return "";
		}
		else {
			return _end;
		}
	}

	@Override
	public void setEnd(String end) {
		_end = end;
	}

	@Override
	public int getChapter() {
		return _chapter;
	}

	@Override
	public void setChapter(int chapter) {
		_chapter = chapter;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Segment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Segment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SegmentImpl segmentImpl = new SegmentImpl();

		segmentImpl.setSegmentId(getSegmentId());
		segmentImpl.setVideoId(getVideoId());
		segmentImpl.setStart(getStart());
		segmentImpl.setTitle(getTitle());
		segmentImpl.setDescription(getDescription());
		segmentImpl.setEnd(getEnd());
		segmentImpl.setChapter(getChapter());
		segmentImpl.setUserId(getUserId());
		segmentImpl.setGroupId(getGroupId());
		segmentImpl.setCompanyId(getCompanyId());
		segmentImpl.setUserName(getUserName());
		segmentImpl.setCreateDate(getCreateDate());
		segmentImpl.setModifiedDate(getModifiedDate());

		segmentImpl.resetOriginalValues();

		return segmentImpl;
	}

	@Override
	public int compareTo(Segment segment) {
		int value = 0;

		value = getStart().compareToIgnoreCase(segment.getStart());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Segment)) {
			return false;
		}

		Segment segment = (Segment)obj;

		long primaryKey = segment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SegmentModelImpl segmentModelImpl = this;

		segmentModelImpl._originalVideoId = segmentModelImpl._videoId;

		segmentModelImpl._setOriginalVideoId = false;

		segmentModelImpl._originalUserId = segmentModelImpl._userId;

		segmentModelImpl._setOriginalUserId = false;

		segmentModelImpl._originalGroupId = segmentModelImpl._groupId;

		segmentModelImpl._setOriginalGroupId = false;

		segmentModelImpl._originalCompanyId = segmentModelImpl._companyId;

		segmentModelImpl._setOriginalCompanyId = false;

		segmentModelImpl._setModifiedDate = false;

		segmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Segment> toCacheModel() {
		SegmentCacheModel segmentCacheModel = new SegmentCacheModel();

		segmentCacheModel.segmentId = getSegmentId();

		segmentCacheModel.videoId = getVideoId();

		segmentCacheModel.start = getStart();

		String start = segmentCacheModel.start;

		if ((start != null) && (start.length() == 0)) {
			segmentCacheModel.start = null;
		}

		segmentCacheModel.title = getTitle();

		String title = segmentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			segmentCacheModel.title = null;
		}

		segmentCacheModel.description = getDescription();

		String description = segmentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			segmentCacheModel.description = null;
		}

		segmentCacheModel.end = getEnd();

		String end = segmentCacheModel.end;

		if ((end != null) && (end.length() == 0)) {
			segmentCacheModel.end = null;
		}

		segmentCacheModel.chapter = getChapter();

		segmentCacheModel.userId = getUserId();

		segmentCacheModel.groupId = getGroupId();

		segmentCacheModel.companyId = getCompanyId();

		segmentCacheModel.userName = getUserName();

		String userName = segmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			segmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			segmentCacheModel.createDate = createDate.getTime();
		}
		else {
			segmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			segmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			segmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return segmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Segment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Segment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Segment)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Segment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Segment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Segment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Segment>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _segmentId;
	private long _videoId;
	private long _originalVideoId;
	private boolean _setOriginalVideoId;
	private String _start;
	private String _title;
	private String _description;
	private String _end;
	private int _chapter;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Segment _escapedModel;

}