/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.uhh.l2g.plugins.model.Video;
import de.uhh.l2g.plugins.model.VideoModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Video service. Represents a row in the &quot;LG_Video&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>VideoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VideoImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see VideoImpl
 * @generated
 */
@ProviderType
public class VideoModelImpl extends BaseModelImpl<Video> implements VideoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video model instance should use the <code>Video</code> interface instead.
	 */
	public static final String TABLE_NAME = "LG_Video";

	public static final Object[][] TABLE_COLUMNS = {
		{"videoId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"lectureseriesId", Types.BIGINT}, {"producerId", Types.BIGINT},
		{"containerFormat", Types.VARCHAR}, {"filename", Types.VARCHAR},
		{"resolution", Types.VARCHAR}, {"duration", Types.VARCHAR},
		{"hostId", Types.BIGINT}, {"fileSize", Types.VARCHAR},
		{"generationDate", Types.VARCHAR}, {"openAccess", Types.INTEGER},
		{"downloadLink", Types.INTEGER}, {"metadataId", Types.BIGINT},
		{"secureFilename", Types.VARCHAR}, {"hits", Types.BIGINT},
		{"uploadDate", Types.TIMESTAMP}, {"permittedToSegment", Types.INTEGER},
		{"rootInstitutionId", Types.BIGINT}, {"citation2go", Types.INTEGER},
		{"termId", Types.BIGINT}, {"tags", Types.VARCHAR},
		{"password_", Types.VARCHAR}, {"licenseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lectureseriesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("producerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("containerFormat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resolution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("generationDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("openAccess", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("downloadLink", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("metadataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("secureFilename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hits", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uploadDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permittedToSegment", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("rootInstitutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("citation2go", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("termId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LG_Video (videoId LONG not null primary key,title VARCHAR(75) null,lectureseriesId LONG,producerId LONG,containerFormat VARCHAR(75) null,filename VARCHAR(75) null,resolution VARCHAR(75) null,duration VARCHAR(75) null,hostId LONG,fileSize VARCHAR(75) null,generationDate VARCHAR(75) null,openAccess INTEGER,downloadLink INTEGER,metadataId LONG,secureFilename VARCHAR(75) null,hits LONG,uploadDate DATE null,permittedToSegment INTEGER,rootInstitutionId LONG,citation2go INTEGER,termId LONG,tags VARCHAR(75) null,password_ VARCHAR(75) null,licenseId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LG_Video";

	public static final String ORDER_BY_JPQL =
		" ORDER BY video.videoId DESC, video.uploadDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LG_Video.videoId DESC, LG_Video.uploadDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Video"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Video"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.Video"),
		true);

	public static final long DOWNLOADLINK_COLUMN_BITMASK = 1L;

	public static final long FILENAME_COLUMN_BITMASK = 2L;

	public static final long LECTURESERIESID_COLUMN_BITMASK = 4L;

	public static final long LICENSEID_COLUMN_BITMASK = 8L;

	public static final long OPENACCESS_COLUMN_BITMASK = 16L;

	public static final long PASSWORD_COLUMN_BITMASK = 32L;

	public static final long PRODUCERID_COLUMN_BITMASK = 64L;

	public static final long ROOTINSTITUTIONID_COLUMN_BITMASK = 128L;

	public static final long TERMID_COLUMN_BITMASK = 256L;

	public static final long UPLOADDATE_COLUMN_BITMASK = 512L;

	public static final long VIDEOID_COLUMN_BITMASK = 1024L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		de.uhh.l2g.plugins.service.util.ServiceProps.get(
			"lock.expiration.time.de.uhh.l2g.plugins.model.Video"));

	public VideoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _videoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVideoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _videoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Video.class;
	}

	@Override
	public String getModelClassName() {
		return Video.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Video)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Video, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Video, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Video)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Video, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Video, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Video>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Video.class.getClassLoader(), Video.class, ModelWrapper.class);

		try {
			Constructor<Video> constructor =
				(Constructor<Video>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Video, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Video, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Video, Object>>();
		Map<String, BiConsumer<Video, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Video, ?>>();

		attributeGetterFunctions.put("videoId", Video::getVideoId);
		attributeSetterBiConsumers.put(
			"videoId", (BiConsumer<Video, Long>)Video::setVideoId);
		attributeGetterFunctions.put("title", Video::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Video, String>)Video::setTitle);
		attributeGetterFunctions.put(
			"lectureseriesId", Video::getLectureseriesId);
		attributeSetterBiConsumers.put(
			"lectureseriesId",
			(BiConsumer<Video, Long>)Video::setLectureseriesId);
		attributeGetterFunctions.put("producerId", Video::getProducerId);
		attributeSetterBiConsumers.put(
			"producerId", (BiConsumer<Video, Long>)Video::setProducerId);
		attributeGetterFunctions.put(
			"containerFormat", Video::getContainerFormat);
		attributeSetterBiConsumers.put(
			"containerFormat",
			(BiConsumer<Video, String>)Video::setContainerFormat);
		attributeGetterFunctions.put("filename", Video::getFilename);
		attributeSetterBiConsumers.put(
			"filename", (BiConsumer<Video, String>)Video::setFilename);
		attributeGetterFunctions.put("resolution", Video::getResolution);
		attributeSetterBiConsumers.put(
			"resolution", (BiConsumer<Video, String>)Video::setResolution);
		attributeGetterFunctions.put("duration", Video::getDuration);
		attributeSetterBiConsumers.put(
			"duration", (BiConsumer<Video, String>)Video::setDuration);
		attributeGetterFunctions.put("hostId", Video::getHostId);
		attributeSetterBiConsumers.put(
			"hostId", (BiConsumer<Video, Long>)Video::setHostId);
		attributeGetterFunctions.put("fileSize", Video::getFileSize);
		attributeSetterBiConsumers.put(
			"fileSize", (BiConsumer<Video, String>)Video::setFileSize);
		attributeGetterFunctions.put(
			"generationDate", Video::getGenerationDate);
		attributeSetterBiConsumers.put(
			"generationDate",
			(BiConsumer<Video, String>)Video::setGenerationDate);
		attributeGetterFunctions.put("openAccess", Video::getOpenAccess);
		attributeSetterBiConsumers.put(
			"openAccess", (BiConsumer<Video, Integer>)Video::setOpenAccess);
		attributeGetterFunctions.put("downloadLink", Video::getDownloadLink);
		attributeSetterBiConsumers.put(
			"downloadLink", (BiConsumer<Video, Integer>)Video::setDownloadLink);
		attributeGetterFunctions.put("metadataId", Video::getMetadataId);
		attributeSetterBiConsumers.put(
			"metadataId", (BiConsumer<Video, Long>)Video::setMetadataId);
		attributeGetterFunctions.put(
			"secureFilename", Video::getSecureFilename);
		attributeSetterBiConsumers.put(
			"secureFilename",
			(BiConsumer<Video, String>)Video::setSecureFilename);
		attributeGetterFunctions.put("hits", Video::getHits);
		attributeSetterBiConsumers.put(
			"hits", (BiConsumer<Video, Long>)Video::setHits);
		attributeGetterFunctions.put("uploadDate", Video::getUploadDate);
		attributeSetterBiConsumers.put(
			"uploadDate", (BiConsumer<Video, Date>)Video::setUploadDate);
		attributeGetterFunctions.put(
			"permittedToSegment", Video::getPermittedToSegment);
		attributeSetterBiConsumers.put(
			"permittedToSegment",
			(BiConsumer<Video, Integer>)Video::setPermittedToSegment);
		attributeGetterFunctions.put(
			"rootInstitutionId", Video::getRootInstitutionId);
		attributeSetterBiConsumers.put(
			"rootInstitutionId",
			(BiConsumer<Video, Long>)Video::setRootInstitutionId);
		attributeGetterFunctions.put("citation2go", Video::getCitation2go);
		attributeSetterBiConsumers.put(
			"citation2go", (BiConsumer<Video, Integer>)Video::setCitation2go);
		attributeGetterFunctions.put("termId", Video::getTermId);
		attributeSetterBiConsumers.put(
			"termId", (BiConsumer<Video, Long>)Video::setTermId);
		attributeGetterFunctions.put("tags", Video::getTags);
		attributeSetterBiConsumers.put(
			"tags", (BiConsumer<Video, String>)Video::setTags);
		attributeGetterFunctions.put("password", Video::getPassword);
		attributeSetterBiConsumers.put(
			"password", (BiConsumer<Video, String>)Video::setPassword);
		attributeGetterFunctions.put("licenseId", Video::getLicenseId);
		attributeSetterBiConsumers.put(
			"licenseId", (BiConsumer<Video, Long>)Video::setLicenseId);
		attributeGetterFunctions.put("groupId", Video::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Video, Long>)Video::setGroupId);
		attributeGetterFunctions.put("companyId", Video::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Video, Long>)Video::setCompanyId);
		attributeGetterFunctions.put("userId", Video::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Video, Long>)Video::setUserId);
		attributeGetterFunctions.put("userName", Video::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Video, String>)Video::setUserName);
		attributeGetterFunctions.put("createDate", Video::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Video, Date>)Video::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Video::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Video, Date>)Video::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask = -1L;

		_videoId = videoId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public long getLectureseriesId() {
		return _lectureseriesId;
	}

	@Override
	public void setLectureseriesId(long lectureseriesId) {
		_columnBitmask |= LECTURESERIESID_COLUMN_BITMASK;

		if (!_setOriginalLectureseriesId) {
			_setOriginalLectureseriesId = true;

			_originalLectureseriesId = _lectureseriesId;
		}

		_lectureseriesId = lectureseriesId;
	}

	public long getOriginalLectureseriesId() {
		return _originalLectureseriesId;
	}

	@Override
	public long getProducerId() {
		return _producerId;
	}

	@Override
	public void setProducerId(long producerId) {
		_columnBitmask |= PRODUCERID_COLUMN_BITMASK;

		if (!_setOriginalProducerId) {
			_setOriginalProducerId = true;

			_originalProducerId = _producerId;
		}

		_producerId = producerId;
	}

	public long getOriginalProducerId() {
		return _originalProducerId;
	}

	@Override
	public String getContainerFormat() {
		if (_containerFormat == null) {
			return "";
		}
		else {
			return _containerFormat;
		}
	}

	@Override
	public void setContainerFormat(String containerFormat) {
		_containerFormat = containerFormat;
	}

	@Override
	public String getFilename() {
		if (_filename == null) {
			return "";
		}
		else {
			return _filename;
		}
	}

	@Override
	public void setFilename(String filename) {
		_columnBitmask |= FILENAME_COLUMN_BITMASK;

		if (_originalFilename == null) {
			_originalFilename = _filename;
		}

		_filename = filename;
	}

	public String getOriginalFilename() {
		return GetterUtil.getString(_originalFilename);
	}

	@Override
	public String getResolution() {
		if (_resolution == null) {
			return "";
		}
		else {
			return _resolution;
		}
	}

	@Override
	public void setResolution(String resolution) {
		_resolution = resolution;
	}

	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		_duration = duration;
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_hostId = hostId;
	}

	@Override
	public String getFileSize() {
		if (_fileSize == null) {
			return "";
		}
		else {
			return _fileSize;
		}
	}

	@Override
	public void setFileSize(String fileSize) {
		_fileSize = fileSize;
	}

	@Override
	public String getGenerationDate() {
		if (_generationDate == null) {
			return "";
		}
		else {
			return _generationDate;
		}
	}

	@Override
	public void setGenerationDate(String generationDate) {
		_generationDate = generationDate;
	}

	@Override
	public int getOpenAccess() {
		return _openAccess;
	}

	@Override
	public void setOpenAccess(int openAccess) {
		_columnBitmask |= OPENACCESS_COLUMN_BITMASK;

		if (!_setOriginalOpenAccess) {
			_setOriginalOpenAccess = true;

			_originalOpenAccess = _openAccess;
		}

		_openAccess = openAccess;
	}

	public int getOriginalOpenAccess() {
		return _originalOpenAccess;
	}

	@Override
	public int getDownloadLink() {
		return _downloadLink;
	}

	@Override
	public void setDownloadLink(int downloadLink) {
		_columnBitmask |= DOWNLOADLINK_COLUMN_BITMASK;

		if (!_setOriginalDownloadLink) {
			_setOriginalDownloadLink = true;

			_originalDownloadLink = _downloadLink;
		}

		_downloadLink = downloadLink;
	}

	public int getOriginalDownloadLink() {
		return _originalDownloadLink;
	}

	@Override
	public long getMetadataId() {
		return _metadataId;
	}

	@Override
	public void setMetadataId(long metadataId) {
		_metadataId = metadataId;
	}

	@Override
	public String getSecureFilename() {
		if (_secureFilename == null) {
			return "";
		}
		else {
			return _secureFilename;
		}
	}

	@Override
	public void setSecureFilename(String secureFilename) {
		_secureFilename = secureFilename;
	}

	@Override
	public long getHits() {
		return _hits;
	}

	@Override
	public void setHits(long hits) {
		_hits = hits;
	}

	@Override
	public Date getUploadDate() {
		return _uploadDate;
	}

	@Override
	public void setUploadDate(Date uploadDate) {
		_columnBitmask = -1L;

		if (_originalUploadDate == null) {
			_originalUploadDate = _uploadDate;
		}

		_uploadDate = uploadDate;
	}

	public Date getOriginalUploadDate() {
		return _originalUploadDate;
	}

	@Override
	public int getPermittedToSegment() {
		return _permittedToSegment;
	}

	@Override
	public void setPermittedToSegment(int permittedToSegment) {
		_permittedToSegment = permittedToSegment;
	}

	@Override
	public long getRootInstitutionId() {
		return _rootInstitutionId;
	}

	@Override
	public void setRootInstitutionId(long rootInstitutionId) {
		_columnBitmask |= ROOTINSTITUTIONID_COLUMN_BITMASK;

		if (!_setOriginalRootInstitutionId) {
			_setOriginalRootInstitutionId = true;

			_originalRootInstitutionId = _rootInstitutionId;
		}

		_rootInstitutionId = rootInstitutionId;
	}

	public long getOriginalRootInstitutionId() {
		return _originalRootInstitutionId;
	}

	@Override
	public int getCitation2go() {
		return _citation2go;
	}

	@Override
	public void setCitation2go(int citation2go) {
		_citation2go = citation2go;
	}

	@Override
	public long getTermId() {
		return _termId;
	}

	@Override
	public void setTermId(long termId) {
		_columnBitmask |= TERMID_COLUMN_BITMASK;

		if (!_setOriginalTermId) {
			_setOriginalTermId = true;

			_originalTermId = _termId;
		}

		_termId = termId;
	}

	public long getOriginalTermId() {
		return _originalTermId;
	}

	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_columnBitmask |= PASSWORD_COLUMN_BITMASK;

		if (_originalPassword == null) {
			_originalPassword = _password;
		}

		_password = password;
	}

	public String getOriginalPassword() {
		return GetterUtil.getString(_originalPassword);
	}

	@Override
	public long getLicenseId() {
		return _licenseId;
	}

	@Override
	public void setLicenseId(long licenseId) {
		_columnBitmask |= LICENSEID_COLUMN_BITMASK;

		if (!_setOriginalLicenseId) {
			_setOriginalLicenseId = true;

			_originalLicenseId = _licenseId;
		}

		_licenseId = licenseId;
	}

	public long getOriginalLicenseId() {
		return _originalLicenseId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Video.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Video toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VideoImpl videoImpl = new VideoImpl();

		videoImpl.setVideoId(getVideoId());
		videoImpl.setTitle(getTitle());
		videoImpl.setLectureseriesId(getLectureseriesId());
		videoImpl.setProducerId(getProducerId());
		videoImpl.setContainerFormat(getContainerFormat());
		videoImpl.setFilename(getFilename());
		videoImpl.setResolution(getResolution());
		videoImpl.setDuration(getDuration());
		videoImpl.setHostId(getHostId());
		videoImpl.setFileSize(getFileSize());
		videoImpl.setGenerationDate(getGenerationDate());
		videoImpl.setOpenAccess(getOpenAccess());
		videoImpl.setDownloadLink(getDownloadLink());
		videoImpl.setMetadataId(getMetadataId());
		videoImpl.setSecureFilename(getSecureFilename());
		videoImpl.setHits(getHits());
		videoImpl.setUploadDate(getUploadDate());
		videoImpl.setPermittedToSegment(getPermittedToSegment());
		videoImpl.setRootInstitutionId(getRootInstitutionId());
		videoImpl.setCitation2go(getCitation2go());
		videoImpl.setTermId(getTermId());
		videoImpl.setTags(getTags());
		videoImpl.setPassword(getPassword());
		videoImpl.setLicenseId(getLicenseId());
		videoImpl.setGroupId(getGroupId());
		videoImpl.setCompanyId(getCompanyId());
		videoImpl.setUserId(getUserId());
		videoImpl.setUserName(getUserName());
		videoImpl.setCreateDate(getCreateDate());
		videoImpl.setModifiedDate(getModifiedDate());

		videoImpl.resetOriginalValues();

		return videoImpl;
	}

	@Override
	public int compareTo(Video video) {
		int value = 0;

		if (getVideoId() < video.getVideoId()) {
			value = -1;
		}
		else if (getVideoId() > video.getVideoId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getUploadDate(), video.getUploadDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Video)) {
			return false;
		}

		Video video = (Video)obj;

		long primaryKey = video.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VideoModelImpl videoModelImpl = this;

		videoModelImpl._originalLectureseriesId =
			videoModelImpl._lectureseriesId;

		videoModelImpl._setOriginalLectureseriesId = false;

		videoModelImpl._originalProducerId = videoModelImpl._producerId;

		videoModelImpl._setOriginalProducerId = false;

		videoModelImpl._originalFilename = videoModelImpl._filename;

		videoModelImpl._originalOpenAccess = videoModelImpl._openAccess;

		videoModelImpl._setOriginalOpenAccess = false;

		videoModelImpl._originalDownloadLink = videoModelImpl._downloadLink;

		videoModelImpl._setOriginalDownloadLink = false;

		videoModelImpl._originalUploadDate = videoModelImpl._uploadDate;

		videoModelImpl._originalRootInstitutionId =
			videoModelImpl._rootInstitutionId;

		videoModelImpl._setOriginalRootInstitutionId = false;

		videoModelImpl._originalTermId = videoModelImpl._termId;

		videoModelImpl._setOriginalTermId = false;

		videoModelImpl._originalPassword = videoModelImpl._password;

		videoModelImpl._originalLicenseId = videoModelImpl._licenseId;

		videoModelImpl._setOriginalLicenseId = false;

		videoModelImpl._setModifiedDate = false;

		videoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Video> toCacheModel() {
		VideoCacheModel videoCacheModel = new VideoCacheModel();

		videoCacheModel.videoId = getVideoId();

		videoCacheModel.title = getTitle();

		String title = videoCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			videoCacheModel.title = null;
		}

		videoCacheModel.lectureseriesId = getLectureseriesId();

		videoCacheModel.producerId = getProducerId();

		videoCacheModel.containerFormat = getContainerFormat();

		String containerFormat = videoCacheModel.containerFormat;

		if ((containerFormat != null) && (containerFormat.length() == 0)) {
			videoCacheModel.containerFormat = null;
		}

		videoCacheModel.filename = getFilename();

		String filename = videoCacheModel.filename;

		if ((filename != null) && (filename.length() == 0)) {
			videoCacheModel.filename = null;
		}

		videoCacheModel.resolution = getResolution();

		String resolution = videoCacheModel.resolution;

		if ((resolution != null) && (resolution.length() == 0)) {
			videoCacheModel.resolution = null;
		}

		videoCacheModel.duration = getDuration();

		String duration = videoCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			videoCacheModel.duration = null;
		}

		videoCacheModel.hostId = getHostId();

		videoCacheModel.fileSize = getFileSize();

		String fileSize = videoCacheModel.fileSize;

		if ((fileSize != null) && (fileSize.length() == 0)) {
			videoCacheModel.fileSize = null;
		}

		videoCacheModel.generationDate = getGenerationDate();

		String generationDate = videoCacheModel.generationDate;

		if ((generationDate != null) && (generationDate.length() == 0)) {
			videoCacheModel.generationDate = null;
		}

		videoCacheModel.openAccess = getOpenAccess();

		videoCacheModel.downloadLink = getDownloadLink();

		videoCacheModel.metadataId = getMetadataId();

		videoCacheModel.secureFilename = getSecureFilename();

		String secureFilename = videoCacheModel.secureFilename;

		if ((secureFilename != null) && (secureFilename.length() == 0)) {
			videoCacheModel.secureFilename = null;
		}

		videoCacheModel.hits = getHits();

		Date uploadDate = getUploadDate();

		if (uploadDate != null) {
			videoCacheModel.uploadDate = uploadDate.getTime();
		}
		else {
			videoCacheModel.uploadDate = Long.MIN_VALUE;
		}

		videoCacheModel.permittedToSegment = getPermittedToSegment();

		videoCacheModel.rootInstitutionId = getRootInstitutionId();

		videoCacheModel.citation2go = getCitation2go();

		videoCacheModel.termId = getTermId();

		videoCacheModel.tags = getTags();

		String tags = videoCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			videoCacheModel.tags = null;
		}

		videoCacheModel.password = getPassword();

		String password = videoCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			videoCacheModel.password = null;
		}

		videoCacheModel.licenseId = getLicenseId();

		videoCacheModel.groupId = getGroupId();

		videoCacheModel.companyId = getCompanyId();

		videoCacheModel.userId = getUserId();

		videoCacheModel.userName = getUserName();

		String userName = videoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			videoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			videoCacheModel.createDate = createDate.getTime();
		}
		else {
			videoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			videoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			videoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return videoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Video)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Video)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Video>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _videoId;
	private String _title;
	private long _lectureseriesId;
	private long _originalLectureseriesId;
	private boolean _setOriginalLectureseriesId;
	private long _producerId;
	private long _originalProducerId;
	private boolean _setOriginalProducerId;
	private String _containerFormat;
	private String _filename;
	private String _originalFilename;
	private String _resolution;
	private String _duration;
	private long _hostId;
	private String _fileSize;
	private String _generationDate;
	private int _openAccess;
	private int _originalOpenAccess;
	private boolean _setOriginalOpenAccess;
	private int _downloadLink;
	private int _originalDownloadLink;
	private boolean _setOriginalDownloadLink;
	private long _metadataId;
	private String _secureFilename;
	private long _hits;
	private Date _uploadDate;
	private Date _originalUploadDate;
	private int _permittedToSegment;
	private long _rootInstitutionId;
	private long _originalRootInstitutionId;
	private boolean _setOriginalRootInstitutionId;
	private int _citation2go;
	private long _termId;
	private long _originalTermId;
	private boolean _setOriginalTermId;
	private String _tags;
	private String _password;
	private String _originalPassword;
	private long _licenseId;
	private long _originalLicenseId;
	private boolean _setOriginalLicenseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Video _escapedModel;

}